# -*- coding: utf-8 -*-
"""SD11オセロ

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10QmJe7ZWbk6YGyj_aaBfbXQydN71PNE2
"""

!git clone https://github.com/kkuramitsu/reversi2021.git

from reversi2021.reversi import *

game(my_AI, my_AI)

"""# 今日のミッション

1. reversi.py のソースコードを理解する
2. random_AI(board, color) 関数を定義して、ランダムに石をおくAIを作ってみましょう。ランダムとは、乱数を使います。置けない場所においてはダメです。

"""

#
#(シエルシ) 6x6
#

N = 6 # 0

空 = 0 #
黒 = 1 # 黒
ホワイト = 2 #
STONE = [□'、''、'○'] #石の文字

#
# ボード = [0] * (N*N)
#

デフ xy(p): # 1 ディズディスディプス
  戻り値 p % N ,p // N


デフ p(x, y): # 2 ディズディズ 1 ディピティ
  戻り値 x + y * N

# リバーシの初期画面を生成する

デフinit_board():
  ボード = [空] * ( N*N)
  c = N//2
  ボード[p(c, c)] = ブラック
  ボード[p(c-1, c-1)] = ブラック
  ボード[p(c, c-1)] = ホワイト
  ボード[p(c-1, c)] = ホワイト
  返却ボード

# リバーシの画面を表示する

デフshow_board(ボード):
  カウント= [0, 0, 0]
  範囲のyの場合(N):
    範囲の x の場合(N):
      石 = ボード[p(x, y)]
      カウント[石] += 1
      プリント(ストーン[石],終了='')
    プリント()
  プリント()
  ジッパーのペアの場合(石,カウント):
    印刷(ペア,終了 )=' ')
  プリント()


#(x,y)は、下の下の下に置く
デフon_borad(x, y):
  戻り値0 < = x < N と0 < = y < N

#(x,y)、ディジックス
def try_reverse(ボード, x, y, dx, dy,色):
    on_boradしない場合 (x, y)またはボードの [p(x, y)] == EMPTY:
    偽を返す
  ボードの場合は [p(x, y)] = 色:
    真を返す
  try_reverse場合(ボード, x+dx, y+dy, dx, dy , dy,色):
    ボード[p(x, y)] = 色
    真を返す
  偽を返す

# 相手（反対）の色を返す
反対のデフ(色):
  色 == ブラックの場合:
    白を返す
  ブラックを返す

#(x,y)は、アイズ・アイ

def is_oposite(ボード、 x、 y、色):
  on_borad(x, y)とボード[p(x, y)]=反対(色)を返します)


ディル = [
    (-1、 -1), (0, -1), ( 1 , -1),
    (-1、0)、(1、0)、  
    (-1、 1) (0, 1), (1, 1),
]

def put_and_reverse(ボード、位置、色):
  ボードの場合 [位置] ! 
  	偽を返す
  ボード[位置] = 色

  x,y  = xy(位置)
  ターン = 偽
  DXの場合は、DIRでダイ:
    nx = x + dx
    ny = y + dy
    is_oposite場合(ボード, nx, ny,色):
      try_reverse場合(ボード, nx, ny, dx, dy,色):
        ターン = 真
  ターンしない場合:
    ボード[ポジション] = 空
  リターンターン

# プレイが継続できるか？
# つまり、まだ石を置けるところが残っているか調べる？
デフcan_play(ボード、色):
  ボード = ボード[:] # # オンソ
  範囲内の位置 ( 0, N*N)
    put_and_reverse場合(ボード,位置,色):
      真を返す
  偽を返す


デフゲーム(プレーヤー1、プレーヤー2):
	ボード = init_board()
	show_board(ボード))
	on_gaming = 真 # ゲームの数?
	on_gaming中:
		on_gaming = 偽 #,その下に付く
		can_play場合(ボード,ブラック):
			#プレーヤー1の#の
			ポジション = プレーヤー1(ボード[:],ブラック))
			show_board(ボード))
			# 黒が正しく置けたら、ゲーム続行
			on_gaming = put_and_reverse(ボード、位置、黒)
		can_play場合(ボード,ホワイト):
			#プレーヤー1の#の
			ポジション = プレーヤー2(ボード[:],ホワイト)
			show_board(ボード))
			# 白が置けたらゲーム続行
			on_gaming = put_and_reverse(ボード、ポジション、ホワイト)
	show_board(ボード)#ゼラ!

#AIを取り付け
  
def my_AI(ボード、色): #おチビちゃんAI
  範囲内の位置(N*N) の場合
    put_and_reverse場合(ボード,位置,色):
      リターンポジション
  0 を返す